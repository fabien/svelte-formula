(window.webpackJsonp=window.webpackJsonp||[]).push([[5],{74:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return i})),n.d(t,"metadata",(function(){return s})),n.d(t,"toc",(function(){return l})),n.d(t,"default",(function(){return c}));var r=n(3),a=n(7),o=(n(0),n(97)),i={id:"beaker",title:"Beaker API",sidebar_label:"Beaker API"},s={unversionedId:"groups/beaker",id:"groups/beaker",isDocsHomePage:!1,title:"Beaker API",description:"Beaker is Formula's API that helps with the creation of multi-row forms using lists of data (e.g. contact or product",source:"@site/docs/groups/groups.md",slug:"/groups/beaker",permalink:"/svelte-formula/docs/groups/beaker",version:"current",sidebar_label:"Beaker API",sidebar:"someSidebar",previous:{title:"Formula Attributes",permalink:"/svelte-formula/docs/attributes"},next:{title:"Data API",permalink:"/svelte-formula/docs/groups/data"}},l=[{value:"Usage",id:"usage",children:[{value:"Adding and Removing items",id:"adding-and-removing-items",children:[]},{value:"Note about <code>radio</code> groups",id:"note-about-radio-groups",children:[]}]},{value:"Example",id:"example",children:[]}],u={toc:l};function c(e){var t=e.components,n=Object(a.a)(e,["components"]);return Object(o.b)("wrapper",Object(r.a)({},u,n,{components:t,mdxType:"MDXLayout"}),Object(o.b)("p",null,"Beaker is Formula's API that helps with the creation of multi-row forms using lists of data (e.g. contact or product\nlist)."),Object(o.b)("blockquote",null,Object(o.b)("p",{parentName:"blockquote"},Object(o.b)("strong",{parentName:"p"},"Beaker is still in active development - as such there may still be API changes"))),Object(o.b)("p",null,"Under-the-hood it uses Formula to create a form from a row of data provided, and works well with Svelte's ",Object(o.b)("inlineCode",{parentName:"p"},"{#each}"),"\nblocks to render the form component."),Object(o.b)("p",null,"When creating a group it's possible to set any existing data, and add and remove rows in the store using helper methods,\nand using the store to render the component HTML."),Object(o.b)("h2",{id:"usage"},"Usage"),Object(o.b)("p",null,"Like ",Object(o.b)("inlineCode",{parentName:"p"},"formula")," you import the ",Object(o.b)("inlineCode",{parentName:"p"},"beaker")," function. This function returns an object that is the entire group functionality."),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-svelte"},"import { beaker } from 'svelte-formula';\n\nconst myGroup = beaker();\n")),Object(o.b)("p",null,"To bind the group to a component pass ",Object(o.b)("inlineCode",{parentName:"p"},"<myGroup>.group")," to ",Object(o.b)("inlineCode",{parentName:"p"},"use"),", then inside the group provide an ",Object(o.b)("inlineCode",{parentName:"p"},"{#each}")," block that\nwill contain the template for your group form."),Object(o.b)("p",null,"Stores are available via ",Object(o.b)("inlineCode",{parentName:"p"},"<myGroup>.stores")," object - the names are the same as the ",Object(o.b)("a",{parentName:"p",href:"/svelte-formula/docs/stores/stores"},"Formula Stores")),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"the main difference is that the data is an Array of objects instead of a single object.")),Object(o.b)("h3",{id:"adding-and-removing-items"},"Adding and Removing items"),Object(o.b)("p",null,"Adding and removing items to the store is easy - there is a ",Object(o.b)("a",{parentName:"p",href:"/svelte-formula/docs/groups/data"},"data api")," for handling data."),Object(o.b)("p",null,"You can initialise a group with ",Object(o.b)("inlineCode",{parentName:"p"},"<myGroup>.init(items)")," passing an array of items for your form group to be initialised\nwith."),Object(o.b)("p",null,"To add another item call ",Object(o.b)("inlineCode",{parentName:"p"},"<myGroup>.add(item)")," with your item to add. To remove an item call ",Object(o.b)("inlineCode",{parentName:"p"},"<myGroup>.delete(index)"),"\nwith the numerical index of the array item to remove."),Object(o.b)("h3",{id:"note-about-radio-groups"},"Note about ",Object(o.b)("inlineCode",{parentName:"h3"},"radio")," groups"),Object(o.b)("p",null,"Due to the way ",Object(o.b)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/radio"},"HTML Radio Groups")," work it is\nrequired to have unique names as well as ID properties in your HTML. To support this you can provide a ",Object(o.b)("inlineCode",{parentName:"p"},"data-formula-name"),"\n",Object(o.b)("a",{parentName:"p",href:"/svelte-formula/docs/attributes"},"attribute")," on any radio groups - this will match the group back to the correct data."),Object(o.b)("h2",{id:"example"},"Example"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-svelte"},"<script>\n  import { get } from 'svelte/store';\n  import { beaker, formula } from 'svelte-formula';\n\n  const { form, formValues, updateForm } = formula();\n\n  // This creates a contact group - you can now bind `contacts.group` to the subgroup\n  const customers = beaker();\n  const customersValues = customers.formValues;\n\n  export let productData = {\n    productName: '',\n  };\n\n  // Set the store with any existing data\n  export let contactData = [{\n    firstName: '',\n    lastName: '',\n    email: '',\n    subscriptionLevel: '',\n    signups: [],\n  }];\n\n  customers.init(contactData);\n\n  // Add a row to the store\n  function addCustomer() {\n    customers.add({\n      firstName: '',\n      lastName: '',\n      email: '',\n      subscriptionLevel: '',\n      signups: [],\n    });\n  }\n\n  // Remove a row from the store\n  function deleteCustomer(index) {\n    customers.delete(index);\n  }\n\n  function submit() {\n    const mainForm = get(formValues);\n    const contacts = get(customersValues);\n    //Do something with the data here\n    console.log(mainForm, contacts);\n  }\n<\/script>\n\n<form use:form on:submit|preventDefault={submit}>\n  <label for='productName'>ProductName</label>\n  <input type='text' id='productName' name='productName' required bind:value={productData.productName} />\n\n  <button type='submit'>Submit Form</button>\n  <button on:click|preventDefault={addCustomer}>Add Customer</button>\n\n  <table>\n    <thead>\n    <tr>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th>Subscription Level</th>\n      <th>Subscriptions</th>\n      <th></th>\n    </tr>\n    </thead>\n    <tbody use:customers.group>\n    {#each $customersValues as row, i}\n      <tr>\n        <td>\n          <label for='firstName-{i}'>First Name</label>\n          <input type='text' id='firstName-{i}' name='firstName' required />\n        </td>\n        <td>\n          <label for='lastName-{i}'>Last Name</label>\n          <input type='text' id='lastName-{i}' name='lastName' required />\n        </td>\n        <td>\n          <label for='email-{i}'>Email Name</label>\n          <input type='email' id='email-{i}' name='email' required />\n        </td>\n        <td>\n          \x3c!-- In multi-group forms, radio groups require a unique name in the DOM - her you can provide 'data-formula-name' to specify the data key --\x3e\n          <label for='subscriptionLevel-{i}-1'>None\n            <input type='radio' id='subscriptionLevel-{i}-1'\n                   name='subscriptionLevel-{i}'\n                   data-formula-name='subscriptionLevel' value='none' />\n          </label>\n\n          <label for='subscriptionLevel-{i}-1'>Partial\n            <input type='radio' id='subscriptionLevel-{i}-2'\n                   name='subscriptionLevel-{i}'\n                   data-formula-name='subscriptionLevel' value='partial' />\n          </label>\n\n          <label for='subscriptionLevel-{i}-1'>Full\n            <input type='radio' id='subscriptionLevel-{i}-3'\n                   name='subscriptionLevel-{i}'\n                   data-formula-name='subscriptionLevel' value='full' />\n          </label>\n\n        </td>\n        <label for='signups-{i}-1'>Daily <input type='checkbox' id='signups-{i}-1' name='signups' value='daily' /></label>\n\n        <label for='signups-{i}-2'>Weekly\n          <input type='checkbox' id='signups-{i}-2' name='signups' value='weekly' />\n        </label>\n        <label for='signups-{i}-3'>News\n          <input type='checkbox' id='signups-{i}-3' name='signups' value='news' />\n        </label>\n        <label for='signups-{i}-4'>Product\n          <input type='checkbox' id='signups-{i}-4' name='signups' value='product' />\n        </label>\n        <td>\n          <button on:click|preventDefault={() => deleteCustomer(i)}>X</button>\n        </td>\n      </tr>\n    {/each}\n    </tbody>\n  </table>\n</form>\n")))}c.isMDXComponent=!0},97:function(e,t,n){"use strict";n.d(t,"a",(function(){return p})),n.d(t,"b",(function(){return b}));var r=n(0),a=n.n(r);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var u=a.a.createContext({}),c=function(e){var t=a.a.useContext(u),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},p=function(e){var t=c(e.components);return a.a.createElement(u.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.a.createElement(a.a.Fragment,{},t)}},d=a.a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,i=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),p=c(n),d=r,b=p["".concat(i,".").concat(d)]||p[d]||m[d]||o;return n?a.a.createElement(b,s(s({ref:t},u),{},{components:n})):a.a.createElement(b,s({ref:t},u))}));function b(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:r,i[1]=s;for(var u=2;u<o;u++)i[u]=n[u];return a.a.createElement.apply(null,i)}return a.a.createElement.apply(null,n)}d.displayName="MDXCreateElement"}}]);